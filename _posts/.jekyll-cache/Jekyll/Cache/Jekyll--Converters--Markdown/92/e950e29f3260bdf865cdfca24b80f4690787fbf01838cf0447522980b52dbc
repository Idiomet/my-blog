I"®<h2 id="automation-using-terraform-and-powershell">Automation using Terraform and Powershell</h2>
<p>Have you ever deployed multiple EC2 instances using Terraform and went through the trouble of turning off ‚ÄúIE Enhanced Security Configuration‚Äù for each instance so that you can browse the rest of the web? Or have you ever wanted a way to automate the installation of Chrome, and runtimes such as Java JDK, .NET Framework, Silverlight, and Adobe Air in each EC2 instance? Well, then this blog post is perfect for you because today I will be going over how to do all of the above using Powershell scripts that run on startup for each instance deployed using Terraform.</p>

<h3 id="including-a-powershell-script-in-terraform-file">Including a Powershell Script in Terraform File</h3>
<p>Below is code that you can copy and paste into your Terraform file. Of course, you still need to input your desired provider and resource blocks.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~&gt; 3.0"
    }
  }
}

# Insert your provider and resource blocks here.

# Powershell script to disable IE Enhanced Security and Install Ninite
  user_data = file("Disable_IE_&amp;_Download_Ninite.ps1")
}
</code></pre></div></div>

<p>The most important line of code is:</p>

<p><code class="language-plaintext highlighter-rouge">user_data = file("Disable_IE_&amp;_Download_Ninite.ps1")</code></p>

<p>This line allows you to include user data that runs on every single EC2 instance that you deploy. In this case, the user data that we will be running is the Powershell file named ‚ÄúDisable_IE_&amp;_Download_Ninite.ps1‚Äù. I will be going over this script in detail next.</p>

<h3 id="task-automation-using-powershell">Task Automation using Powershell</h3>
<p>Next, create a new file in the same folder as the Terraform file that you created earlier and name it ‚ÄúDisable_IE_&amp;_Download_Ninite.ps1‚Äù. So, within that new file you created, copy and paste the following code:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span><span class="nf">powershell</span><span class="err">&gt;</span><span class="w">
</span><span class="c"># Disable IE Enhanced Security</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Disable-InternetExplorerESC</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$AdminKey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"HKLM:\SOFTWARE\Microsoft\Active - Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"</span><span class="w">
    </span><span class="nv">$UserKey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"HKLM:\SOFTWARE\Microsoft\Active - Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"</span><span class="w">
    </span><span class="nf">Set-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$AdminKey</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s2">"IsInstalled"</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nf">Set-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$UserKey</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s2">"IsInstalled"</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nf">Stop-Process</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">Explorer</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nf">Write-Host</span><span class="w"> </span><span class="s2">"IE Enhanced Security Configuration (ESC) has been disabled."</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Green</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="nf">Disable-InternetExplorerESC</span><span class="w">

</span><span class="c"># Download Ninite Installer</span><span class="w">
</span><span class="nf">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"https://ninite.com/.net4.8-adoptjava8-adoptjavax11-adoptjavax8-air-chrome-silverlight/"</span><span class="w"> </span><span class="nt">-OutFile</span><span class="w"> </span><span class="s2">"C:\Ninite_Installer.exe"</span><span class="w">

</span><span class="c"># Open Ninite Installer - RUNS IN BACKGROUND!</span><span class="w">
</span><span class="nf">Invoke-Item</span><span class="w"> </span><span class="s2">"C:\Ninite_Installer.exe"</span><span class="w">
</span><span class="err">&lt;</span><span class="nf">/powershell</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div></div>

<p>Starting with the first commented code block, this will disable the IE Enhanced Security Configuration, so that you are able to freely surf the web with no restrictions. Next, the second commented code block will download the Ninite installer for .NET 4.8 Framework, Java JDKs, Adobe Air, Chrome, and Silverlight and save it to a file named Ninite_Installer.exe. If you‚Äôre not familiar with Ninite, Ninite allows you to install multiple programs at the same time. Lastly, the last commented code block will allow you to actually run the Ninite installer in the background without any user interaction. Pretty sweet huh?</p>

<p>That‚Äôs pretty much it, now when you deploy your EC2 instances with Terraform it will run the above Powershell script on each instance and perform the above functions! Isn‚Äôt automation awesome?</p>
:ET